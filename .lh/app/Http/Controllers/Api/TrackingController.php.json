{
    "sourceFile": "app/Http/Controllers/Api/TrackingController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1733222046243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733222073628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,44 +10,41 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-    \n+\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n                     ->where('box_name', $shipment->box_name)->first();\n             }\n-    \n+\n             $boxeses = $querys;\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-    \n+\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n                         $list_task->put('status', $status->status->name);\n                         $list_task->put('comment', $status->comment);\n                         $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $list_task->put('finished_date', $status->finished_at?->format('d-m-Y') ?? 'N/A'); // Include finished date\n                         $statuses->put($k, $list_task);\n                     }\n                     $item->put('statuses', $statuses);\n                 } else {\n                     $list_task = collect();\n                     $list_task->put('status', $shipments->statusVal->name);\n                     $list_task->put('comment', '');\n                     $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $list_task->put('finished_date', 'N/A'); // Default for shipments without statuses\n-                    $item->put('statuses', array($list_task));\n+                    $item->put('statuses',array($list_task));\n                 }\n                 $data->put($j, $item);\n             }\n-    \n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -60,9 +57,9 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n@@ -73,9 +70,8 @@\n                 'message' => 'no data is available'\n             ]);\n         }\n     }\n-    \n \n \n }\n \n"
                },
                {
                    "date": 1733222284319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,71 +7,73 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request) {\n-        $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+    public function tracking(Request $request)\n+{\n+    $booking_no = $request->booking_no;\n+    $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n \n-        if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n-            }\n+    if ($shipments) {\n+        $querys = [];\n+        foreach ($shipments->boxes as $i => $shipment) {\n+            $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                ->where('box_name', $shipment->box_name)->first();\n+        }\n \n-            $boxeses = $querys;\n-            $data = collect();\n-            foreach ($querys as $j => $query) {\n-                $item = collect();\n-                $item->put('box_names', $query->box_name);\n+        $data = collect();\n+        foreach ($querys as $j => $query) {\n+            $item = collect();\n+            $item->put('box_names', $query->box_name);\n \n-                $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n+            $statuses = collect();\n+            if ($query->boxStatuses->isNotEmpty()) {\n+                foreach ($query->boxStatuses as $k => $status) {\n                     $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n-                    $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                    $list_task->put('status', $status->status->name);\n+                    $list_task->put('comment', $status->comment ?? '');\n+                    $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                    $statuses->push($list_task);\n                 }\n-                $data->put($j, $item);\n+            } else {\n+                // Fallback to shipment's status if no box statuses exist\n+                $list_task = collect();\n+                $list_task->put('status', $shipments->statusVal->name ?? 'Unknown');\n+                $list_task->put('comment', $shipments->comment ?? '');\n+                $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                $statuses->push($list_task);\n             }\n-            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n-            $adress = collect([\n-                'invoice_number' => $shipments->booking_number,\n-                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n-                'receiver_name' => $shipments->receiver->name ?? '',\n-                'receiver_address' => $shipments->receiver->address->address ?? '',\n-                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n-                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n-                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n-                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n-                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => count($shipments->boxes) ?? '',\n-                'receiver_comment' => $comment ?? ''\n-            ]);\n \n-            return response()->json([\n-                'success' => true,\n-                'data' => $data,\n-                'adress' => $adress,\n-            ]);\n-        } else {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'no data is available'\n-            ]);\n+            $item->put('statuses', $statuses);\n+            $data->push($item);\n         }\n+\n+        $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n+        $adress = collect([\n+            'invoice_number' => $shipments->booking_number,\n+            'invoice_date' => $shipments->created_at->format('d/m/Y'),\n+            'receiver_name' => $shipments->receiver->name ?? '',\n+            'receiver_address' => $shipments->receiver->address->address ?? '',\n+            'receiver_city_name' => $shipments->receiver->city_name ?? '',\n+            'receiver_district' => $shipments->receiver->address->district->name ?? '',\n+            'receiver_state' => $shipments->receiver->address->state->name ?? '',\n+            'receiver_country' => $shipments->receiver->address->country->name ?? '',\n+            'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n+            'receiver_boxes' => count($shipments->boxes) ?? '',\n+            'receiver_comment' => $comment ?? ''\n+        ]);\n+\n+        return response()->json([\n+            'success' => true,\n+            'data' => $data,\n+            'adress' => $adress,\n+        ]);\n     }\n \n+    return response()->json([\n+        'success' => false,\n+        'message' => 'No data is available',\n+    ]);\n+}\n \n }\n \n"
                },
                {
                    "date": 1733222304630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,73 +7,71 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request)\n-{\n-    $booking_no = $request->booking_no;\n-    $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+    public function tracking(Request $request) {\n+        $booking_no = $request->booking_no;\n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n \n-    if ($shipments) {\n-        $querys = [];\n-        foreach ($shipments->boxes as $i => $shipment) {\n-            $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                ->where('box_name', $shipment->box_name)->first();\n-        }\n+        if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n+            }\n \n-        $data = collect();\n-        foreach ($querys as $j => $query) {\n-            $item = collect();\n-            $item->put('box_names', $query->box_name);\n+            $boxeses = $querys;\n+            $data = collect();\n+            foreach ($querys as $j => $query) {\n+                $item = collect();\n+                $item->put('box_names', $query->box_name);\n \n-            $statuses = collect();\n-            if ($query->boxStatuses->isNotEmpty()) {\n-                foreach ($query->boxStatuses as $k => $status) {\n+                $statuses = collect();\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n                     $list_task = collect();\n-                    $list_task->put('status', $status->status->name);\n-                    $list_task->put('comment', $status->comment ?? '');\n-                    $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                    $statuses->push($list_task);\n+                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('comment', '');\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                    $item->put('statuses',array($list_task));\n                 }\n-            } else {\n-                // Fallback to shipment's status if no box statuses exist\n-                $list_task = collect();\n-                $list_task->put('status', $shipments->statusVal->name ?? 'Unknown');\n-                $list_task->put('comment', $shipments->comment ?? '');\n-                $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                $statuses->push($list_task);\n+                $data->put($j, $item);\n             }\n+            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n+            $adress = collect([\n+                'invoice_number' => $shipments->booking_number,\n+                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n+                'receiver_name' => $shipments->receiver->name ?? '',\n+                'receiver_address' => $shipments->receiver->address->address ?? '',\n+                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n+                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n+                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n+                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n+                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n+                'receiver_boxes' => count($shipments->boxes) ?? '',\n+                'receiver_comment' => $comment ?? ''\n+            ]);\n \n-            $item->put('statuses', $statuses);\n-            $data->push($item);\n+            return response()->json([\n+                'success' => true,\n+                'data' => $data,\n+                'adress' => $adress,\n+            ]);\n+        } else {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'no data is available'\n+            ]);\n         }\n-\n-        $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n-        $adress = collect([\n-            'invoice_number' => $shipments->booking_number,\n-            'invoice_date' => $shipments->created_at->format('d/m/Y'),\n-            'receiver_name' => $shipments->receiver->name ?? '',\n-            'receiver_address' => $shipments->receiver->address->address ?? '',\n-            'receiver_city_name' => $shipments->receiver->city_name ?? '',\n-            'receiver_district' => $shipments->receiver->address->district->name ?? '',\n-            'receiver_state' => $shipments->receiver->address->state->name ?? '',\n-            'receiver_country' => $shipments->receiver->address->country->name ?? '',\n-            'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-            'receiver_boxes' => count($shipments->boxes) ?? '',\n-            'receiver_comment' => $comment ?? ''\n-        ]);\n-\n-        return response()->json([\n-            'success' => true,\n-            'data' => $data,\n-            'adress' => $adress,\n-        ]);\n     }\n \n-    return response()->json([\n-        'success' => false,\n-        'message' => 'No data is available',\n-    ]);\n-}\n \n }\n \n"
                },
                {
                    "date": 1733285130095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,71 +7,31 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request) {\n-        $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n-        if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n+    foreach ($querys as $j => $query) {\n+        $item = collect();\n+        $item->put('box_names', $query->box_name);\n+    \n+        $statuses = collect();\n+        if (isset($query->boxStatuses[0])) {\n+            foreach ($query->boxStatuses as $k => $status) {\n+                $list_task = collect();\n+                $list_task->put('status', $status->status->name);\n+                $list_task->put('comment', $status->comment);\n+                // Remove the date field\n+                $statuses->put($k, $list_task);\n             }\n-\n-            $boxeses = $querys;\n-            $data = collect();\n-            foreach ($querys as $j => $query) {\n-                $item = collect();\n-                $item->put('box_names', $query->box_name);\n-\n-                $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n-                    $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n-                    $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n-                }\n-                $data->put($j, $item);\n-            }\n-            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n-            $adress = collect([\n-                'invoice_number' => $shipments->booking_number,\n-                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n-                'receiver_name' => $shipments->receiver->name ?? '',\n-                'receiver_address' => $shipments->receiver->address->address ?? '',\n-                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n-                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n-                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n-                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n-                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => count($shipments->boxes) ?? '',\n-                'receiver_comment' => $comment ?? ''\n-            ]);\n-\n-            return response()->json([\n-                'success' => true,\n-                'data' => $data,\n-                'adress' => $adress,\n-            ]);\n+            $item->put('statuses', $statuses);\n         } else {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'no data is available'\n-            ]);\n+            $list_task = collect();\n+            $list_task->put('status', $shipments->statusVal->name);\n+            $list_task->put('comment', '');\n+            // Remove the date field\n+            $item->put('statuses', array($list_task));\n         }\n+        $data->put($j, $item);\n     }\n+    \n \n-\n }\n \n"
                },
                {
                    "date": 1733285164252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,31 +7,71 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    foreach ($querys as $j => $query) {\n-        $item = collect();\n-        $item->put('box_names', $query->box_name);\n-    \n-        $statuses = collect();\n-        if (isset($query->boxStatuses[0])) {\n-            foreach ($query->boxStatuses as $k => $status) {\n-                $list_task = collect();\n-                $list_task->put('status', $status->status->name);\n-                $list_task->put('comment', $status->comment);\n-                // Remove the date field\n-                $statuses->put($k, $list_task);\n+    public function tracking(Request $request) {\n+        $booking_no = $request->booking_no;\n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+\n+        if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n             }\n-            $item->put('statuses', $statuses);\n+\n+            $boxeses = $querys;\n+            $data = collect();\n+            foreach ($querys as $j => $query) {\n+                $item = collect();\n+                $item->put('box_names', $query->box_name);\n+\n+                $statuses = collect();\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n+                    $list_task = collect();\n+                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('comment', '');\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                    $item->put('statuses',array($list_task));\n+                }\n+                $data->put($j, $item);\n+            }\n+            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n+            $adress = collect([\n+                'invoice_number' => $shipments->booking_number,\n+                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n+                'receiver_name' => $shipments->receiver->name ?? '',\n+                'receiver_address' => $shipments->receiver->address->address ?? '',\n+                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n+                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n+                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n+                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n+                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n+                'receiver_boxes' => count($shipments->boxes) ?? '',\n+                'receiver_comment' => $comment ?? ''\n+            ]);\n+\n+            return response()->json([\n+                'success' => true,\n+                'data' => $data,\n+                'adress' => $adress,\n+            ]);\n         } else {\n-            $list_task = collect();\n-            $list_task->put('status', $shipments->statusVal->name);\n-            $list_task->put('comment', '');\n-            // Remove the date field\n-            $item->put('statuses', array($list_task));\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'no data is available'\n+            ]);\n         }\n-        $data->put($j, $item);\n     }\n-    \n \n+\n }\n \n"
                },
                {
                    "date": 1733289031635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('stat', $status->status->name);\n                         $list_task->put('comment', $status->comment);\n                         $list_task->put('date', $status->updated_at->format('d-m-Y'));\n                         $statuses->put($k, $list_task);\n                     }\n"
                },
                {
                    "date": 1733291129836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,44 +7,45 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request) {\n+    public function tracking(Request $request)\n+    {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n+        $shipments = Shipments::where('booking_number', $booking_no)\n+            ->with('receiver', 'boxes', 'boxes.boxStatuses', 'boxes.boxStatuses.status')\n+            ->first();\n+    \n         if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n-            }\n-\n-            $boxeses = $querys;\n             $data = collect();\n-            foreach ($querys as $j => $query) {\n+    \n+            foreach ($shipments->boxes as $j => $box) {\n                 $item = collect();\n-                $item->put('box_names', $query->box_name);\n-\n+                $item->put('box_name', $box->box_name);\n+    \n                 $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('stat', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n+                foreach ($box->boxStatuses as $k => $status) {\n                     $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n-                    $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                    $list_task->put('status', $status->status->name);\n+                    $list_task->put('comment', $status->comment);\n+                    $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n+                    $statuses->push($list_task);\n                 }\n-                $data->put($j, $item);\n+    \n+                // If no boxStatuses, include shipment-level status\n+                if ($statuses->isEmpty()) {\n+                    $statuses->push([\n+                        'status' => $shipments->statusVal->name ?? 'Unknown',\n+                        'comment' => '',\n+                        'date' => $shipments->updated_at->format('d-m-Y')\n+                    ]);\n+                }\n+    \n+                $item->put('statuses', $statuses);\n+                $data->push($item);\n             }\n+    \n+            // Address and other shipment details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -54,24 +55,24 @@\n                 'receiver_district' => $shipments->receiver->address->district->name ?? '',\n                 'receiver_state' => $shipments->receiver->address->state->name ?? '',\n                 'receiver_country' => $shipments->receiver->address->country->name ?? '',\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => count($shipments->boxes) ?? '',\n-                'receiver_comment' => $comment ?? ''\n+                'receiver_boxes' => $shipments->boxes->count(),\n+                'receiver_comment' => $comment\n             ]);\n-\n+    \n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n-        } else {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'no data is available'\n-            ]);\n         }\n+    \n+        return response()->json([\n+            'success' => false,\n+            'message' => 'No data is available'\n+        ]);\n     }\n+    \n \n-\n }\n \n"
                },
                {
                    "date": 1733291315640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,15 +22,15 @@\n                 $item = collect();\n                 $item->put('box_name', $box->box_name);\n     \n                 $statuses = collect();\n-                foreach ($box->boxStatuses as $k => $status) {\n-                    $list_task = collect();\n-                    $list_task->put('status', $status->status->name);\n-                    $list_task->put('comment', $status->comment);\n-                    $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n-                    $statuses->push($list_task);\n-                }\n+                // foreach ($box->boxStatuses as $k => $status) {\n+                //     $list_task = collect();\n+                //     $list_task->put('status', $status->status->name);\n+                //     $list_task->put('comment', $status->comment);\n+                //     $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n+                //     $statuses->push($list_task);\n+                // }\n     \n                 // If no boxStatuses, include shipment-level status\n                 if ($statuses->isEmpty()) {\n                     $statuses->push([\n"
                },
                {
                    "date": 1733291347665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,15 +22,15 @@\n                 $item = collect();\n                 $item->put('box_name', $box->box_name);\n     \n                 $statuses = collect();\n-                // foreach ($box->boxStatuses as $k => $status) {\n-                //     $list_task = collect();\n-                //     $list_task->put('status', $status->status->name);\n-                //     $list_task->put('comment', $status->comment);\n-                //     $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n-                //     $statuses->push($list_task);\n-                // }\n+                foreach ($box->boxStatuses as $k => $status) {\n+                    $list_task = collect();\n+                    $list_task->put('status', $status->status->name);\n+                    $list_task->put('comment', $status->comment);\n+                    $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n+                    $statuses->push($list_task);\n+                }\n     \n                 // If no boxStatuses, include shipment-level status\n                 if ($statuses->isEmpty()) {\n                     $statuses->push([\n"
                },
                {
                    "date": 1733291819404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,12 @@\n                 $item = collect();\n                 $item->put('box_name', $box->box_name);\n     \n                 $statuses = collect();\n-                foreach ($box->boxStatuses as $k => $status) {\n+                // Sort boxStatuses by date to ensure chronological order\n+                $sortedBoxStatuses = $box->boxStatuses->sortBy('updated_at');\n+    \n+                foreach ($sortedBoxStatuses as $k => $status) {\n                     $list_task = collect();\n                     $list_task->put('status', $status->status->name);\n                     $list_task->put('comment', $status->comment);\n                     $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n@@ -71,8 +74,7 @@\n             'success' => false,\n             'message' => 'No data is available'\n         ]);\n     }\n-    \n \n }\n \n"
                },
                {
                    "date": 1733291859970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,48 +7,44 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request)\n-    {\n+    public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)\n-            ->with('receiver', 'boxes', 'boxes.boxStatuses', 'boxes.boxStatuses.status')\n-            ->first();\n-    \n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+\n         if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n+            }\n+\n+            $boxeses = $querys;\n             $data = collect();\n-    \n-            foreach ($shipments->boxes as $j => $box) {\n+            foreach ($querys as $j => $query) {\n                 $item = collect();\n-                $item->put('box_name', $box->box_name);\n-    \n+                $item->put('box_names', $query->box_name);\n+\n                 $statuses = collect();\n-                // Sort boxStatuses by date to ensure chronological order\n-                $sortedBoxStatuses = $box->boxStatuses->sortBy('updated_at');\n-    \n-                foreach ($sortedBoxStatuses as $k => $status) {\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n                     $list_task = collect();\n-                    $list_task->put('status', $status->status->name);\n-                    $list_task->put('comment', $status->comment);\n-                    $list_task->put('date', $status->updated_at->format('d-m-Y')); // Full date format\n-                    $statuses->push($list_task);\n+                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('comment', '');\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                    $item->put('statuses',array($list_task));\n                 }\n-    \n-                // If no boxStatuses, include shipment-level status\n-                if ($statuses->isEmpty()) {\n-                    $statuses->push([\n-                        'status' => $shipments->statusVal->name ?? 'Unknown',\n-                        'comment' => '',\n-                        'date' => $shipments->updated_at->format('d-m-Y')\n-                    ]);\n-                }\n-    \n-                $item->put('statuses', $statuses);\n-                $data->push($item);\n+                $data->put($j, $item);\n             }\n-    \n-            // Address and other shipment details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -58,23 +54,24 @@\n                 'receiver_district' => $shipments->receiver->address->district->name ?? '',\n                 'receiver_state' => $shipments->receiver->address->state->name ?? '',\n                 'receiver_country' => $shipments->receiver->address->country->name ?? '',\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => $shipments->boxes->count(),\n-                'receiver_comment' => $comment\n+                'receiver_boxes' => count($shipments->boxes) ?? '',\n+                'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n+        } else {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'no data is available'\n+            ]);\n         }\n-    \n-        return response()->json([\n-            'success' => false,\n-            'message' => 'No data is available'\n-        ]);\n     }\n \n+\n }\n \n"
                },
                {
                    "date": 1733292935865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,63 @@\n-<?php\n+public function tracking(Request $request) {\n+    $booking_no = $request->booking_no;\n+    $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n \n-namespace App\\Http\\Controllers\\Api;\n+    if (isset($shipments)) {\n+        $querys = [];\n+        foreach ($shipments->boxes as $i => $shipment) {\n+            $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                ->where('box_name', $shipment->box_name)->first();\n+        }\n \n-use App\\Http\\Controllers\\Controller;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\Shipments;\n-use App\\Models\\Boxes;\n-class TrackingController extends Controller\n-{\n-    public function tracking(Request $request) {\n-        $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+        $boxeses = $querys;\n+        $data = collect();\n+        foreach ($querys as $j => $query) {\n+            $item = collect();\n+            $item->put('box_names', $query->box_name);\n \n-        if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n-            }\n-\n-            $boxeses = $querys;\n-            $data = collect();\n-            foreach ($querys as $j => $query) {\n-                $item = collect();\n-                $item->put('box_names', $query->box_name);\n-\n-                $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n+            $statuses = collect();\n+            if (isset($query->boxStatuses[0])) {\n+                foreach ($query->boxStatuses as $k => $status) {\n                     $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n-                    $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                    $list_task->put('status', $status->status->name);\n+                    $list_task->put('comment', $status->comment);\n+                    // Removed date section\n+                    $statuses->put($k, $list_task);\n                 }\n-                $data->put($j, $item);\n+                $item->put('statuses', $statuses);\n+            } else {\n+                $list_task = collect();\n+                $list_task->put('status', $shipments->statusVal->name);\n+                $list_task->put('comment', '');\n+                // Removed date section\n+                $item->put('statuses',array($list_task));\n             }\n-            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n-            $adress = collect([\n-                'invoice_number' => $shipments->booking_number,\n-                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n-                'receiver_name' => $shipments->receiver->name ?? '',\n-                'receiver_address' => $shipments->receiver->address->address ?? '',\n-                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n-                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n-                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n-                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n-                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => count($shipments->boxes) ?? '',\n-                'receiver_comment' => $comment ?? ''\n-            ]);\n+            $data->put($j, $item);\n+        }\n+        $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n+        $adress = collect([\n+            'invoice_number' => $shipments->booking_number,\n+            'invoice_date' => $shipments->created_at->format('d/m/Y'),\n+            'receiver_name' => $shipments->receiver->name ?? '',\n+            'receiver_address' => $shipments->receiver->address->address ?? '',\n+            'receiver_city_name' => $shipments->receiver->city_name ?? '',\n+            'receiver_district' => $shipments->receiver->address->district->name ?? '',\n+            'receiver_state' => $shipments->receiver->address->state->name ?? '',\n+            'receiver_country' => $shipments->receiver->address->country->name ?? '',\n+            'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n+            'receiver_boxes' => count($shipments->boxes) ?? '',\n+            'receiver_comment' => $comment ?? ''\n+        ]);\n \n-            return response()->json([\n-                'success' => true,\n-                'data' => $data,\n-                'adress' => $adress,\n-            ]);\n-        } else {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'no data is available'\n-            ]);\n-        }\n+        return response()->json([\n+            'success' => true,\n+            'data' => $data,\n+            'adress' => $adress,\n+        ]);\n+    } else {\n+        return response()->json([\n+            'success' => false,\n+            'message' => 'no data is available'\n+        ]);\n     }\n-\n-\n-}\n-\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733292947283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,76 @@\n-public function tracking(Request $request) {\n-    $booking_no = $request->booking_no;\n-    $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+<?php\n \n-    if (isset($shipments)) {\n-        $querys = [];\n-        foreach ($shipments->boxes as $i => $shipment) {\n-            $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                ->where('box_name', $shipment->box_name)->first();\n-        }\n+namespace App\\Http\\Controllers\\Api;\n \n-        $boxeses = $querys;\n-        $data = collect();\n-        foreach ($querys as $j => $query) {\n-            $item = collect();\n-            $item->put('box_names', $query->box_name);\n-\n-            $statuses = collect();\n-            if (isset($query->boxStatuses[0])) {\n-                foreach ($query->boxStatuses as $k => $status) {\n+use App\\Http\\Controllers\\Controller;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\Shipments;\n+use App\\Models\\Boxes;\n+class TrackingController extends Controller\n+{\n+    public function tracking(Request $request) {\n+        $booking_no = $request->booking_no;\n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+    \n+        if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n+            }\n+    \n+            $boxeses = $querys;\n+            $data = collect();\n+            foreach ($querys as $j => $query) {\n+                $item = collect();\n+                $item->put('box_names', $query->box_name);\n+    \n+                $statuses = collect();\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        // Removed date section\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n                     $list_task = collect();\n-                    $list_task->put('status', $status->status->name);\n-                    $list_task->put('comment', $status->comment);\n+                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('comment', '');\n                     // Removed date section\n-                    $statuses->put($k, $list_task);\n\\ No newline at end of file\n+                    $item->put('statuses',array($list_task));\n                 }\n-                $item->put('statuses', $statuses);\n-            } else {\n-                $list_task = collect();\n-                $list_task->put('status', $shipments->statusVal->name);\n-                $list_task->put('comment', '');\n-                // Removed date section\n-                $item->put('statuses',array($list_task));\n+                $data->put($j, $item);\n             }\n-            $data->put($j, $item);\n+            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n+            $adress = collect([\n+                'invoice_number' => $shipments->booking_number,\n+                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n+                'receiver_name' => $shipments->receiver->name ?? '',\n+                'receiver_address' => $shipments->receiver->address->address ?? '',\n+                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n+                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n+                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n+                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n+                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n+                'receiver_boxes' => count($shipments->boxes) ?? '',\n+                'receiver_comment' => $comment ?? ''\n+            ]);\n+    \n+            return response()->json([\n+                'success' => true,\n+                'data' => $data,\n+                'adress' => $adress,\n+            ]);\n+        } else {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'no data is available'\n+            ]);\n         }\n-        $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n-        $adress = collect([\n-            'invoice_number' => $shipments->booking_number,\n-            'invoice_date' => $shipments->created_at->format('d/m/Y'),\n-            'receiver_name' => $shipments->receiver->name ?? '',\n-            'receiver_address' => $shipments->receiver->address->address ?? '',\n-            'receiver_city_name' => $shipments->receiver->city_name ?? '',\n-            'receiver_district' => $shipments->receiver->address->district->name ?? '',\n-            'receiver_state' => $shipments->receiver->address->state->name ?? '',\n-            'receiver_country' => $shipments->receiver->address->country->name ?? '',\n-            'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-            'receiver_boxes' => count($shipments->boxes) ?? '',\n-            'receiver_comment' => $comment ?? ''\n-        ]);\n+    }\n \n-        return response()->json([\n-            'success' => true,\n-            'data' => $data,\n-            'adress' => $adress,\n-        ]);\n-    } else {\n-        return response()->json([\n-            'success' => false,\n-            'message' => 'no data is available'\n-        ]);\n-    }\n-}\n+}\n+\n"
                },
                {
                    "date": 1733292963540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,37 +10,37 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-    \n+\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n                     ->where('box_name', $shipment->box_name)->first();\n             }\n-    \n+\n             $boxeses = $querys;\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-    \n+\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n                         $list_task->put('status', $status->status->name);\n                         $list_task->put('comment', $status->comment);\n-                        // Removed date section\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n                         $statuses->put($k, $list_task);\n                     }\n                     $item->put('statuses', $statuses);\n                 } else {\n                     $list_task = collect();\n                     $list_task->put('status', $shipments->statusVal->name);\n                     $list_task->put('comment', '');\n-                    // Removed date section\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n                     $item->put('statuses',array($list_task));\n                 }\n                 $data->put($j, $item);\n             }\n@@ -57,9 +57,9 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n@@ -71,6 +71,7 @@\n             ]);\n         }\n     }\n \n+\n }\n \n"
                },
                {
                    "date": 1733293256563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             ]);\n         } else {\n             return response()->json([\n                 'success' => false,\n-                'message' => 'no data is available'\n+                'message' => 'no data is available'git init\n             ]);\n         }\n     }\n \n"
                },
                {
                    "date": 1733293530532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,44 +7,58 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request) {\n+    public function tracking(Request $request)\n+    {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n-        if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n-            }\n-\n-            $boxeses = $querys;\n+        $shipments = Shipments::where('booking_number', $booking_no)\n+            ->with([\n+                'receiver', \n+                'boxes', \n+                'boxes.boxStatuses', \n+                'boxes.boxStatuses.status'\n+            ])\n+            ->first();\n+    \n+        if ($shipments) {\n             $data = collect();\n-            foreach ($querys as $j => $query) {\n+    \n+            foreach ($shipments->boxes as $box) {\n                 $item = collect();\n-                $item->put('box_names', $query->box_name);\n-\n-                $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n-                    $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n-                    $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                $item->put('box_name', $box->box_name);\n+    \n+                // Collect all statuses, including system and manual statuses\n+                $allStatuses = collect();\n+    \n+                // First, add box-specific statuses\n+                foreach ($box->boxStatuses as $boxStatus) {\n+                    $allStatuses->push([\n+                        'status' => $boxStatus->status->name ?? 'Unknown',\n+                        'comment' => $boxStatus->comment ?? '',\n+                        'date' => $boxStatus->updated_at->format('d-m-Y'),\n+                        'type' => 'box_status'\n+                    ]);\n                 }\n-                $data->put($j, $item);\n+    \n+                // If no box statuses, add shipment-level status\n+                if ($allStatuses->isEmpty()) {\n+                    $allStatuses->push([\n+                        'status' => $shipments->statusVal->name ?? 'Unknown',\n+                        'comment' => '',\n+                        'date' => $shipments->updated_at->format('d-m-Y'),\n+                        'type' => 'shipment_status'\n+                    ]);\n+                }\n+    \n+                // Sort statuses by date\n+                $allStatuses = $allStatuses->sortBy('date');\n+    \n+                $item->put('statuses', $allStatuses);\n+                $data->push($item);\n             }\n+    \n+            // Address and shipment details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -54,23 +68,23 @@\n                 'receiver_district' => $shipments->receiver->address->district->name ?? '',\n                 'receiver_state' => $shipments->receiver->address->state->name ?? '',\n                 'receiver_country' => $shipments->receiver->address->country->name ?? '',\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => count($shipments->boxes) ?? '',\n-                'receiver_comment' => $comment ?? ''\n+                'receiver_boxes' => $shipments->boxes->count(),\n+                'receiver_comment' => $comment\n             ]);\n-\n+    \n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n-        } else {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'no data is available'git init\n-            ]);\n         }\n+    \n+        return response()->json([\n+            'success' => false,\n+            'message' => 'No data is available'\n+        ]);\n     }\n \n \n }\n"
                },
                {
                    "date": 1733293543827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,58 +7,44 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request)\n-    {\n+    public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)\n-            ->with([\n-                'receiver', \n-                'boxes', \n-                'boxes.boxStatuses', \n-                'boxes.boxStatuses.status'\n-            ])\n-            ->first();\n-    \n-        if ($shipments) {\n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+\n+        if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n+            }\n+\n+            $boxeses = $querys;\n             $data = collect();\n-    \n-            foreach ($shipments->boxes as $box) {\n+            foreach ($querys as $j => $query) {\n                 $item = collect();\n-                $item->put('box_name', $box->box_name);\n-    \n-                // Collect all statuses, including system and manual statuses\n-                $allStatuses = collect();\n-    \n-                // First, add box-specific statuses\n-                foreach ($box->boxStatuses as $boxStatus) {\n-                    $allStatuses->push([\n-                        'status' => $boxStatus->status->name ?? 'Unknown',\n-                        'comment' => $boxStatus->comment ?? '',\n-                        'date' => $boxStatus->updated_at->format('d-m-Y'),\n-                        'type' => 'box_status'\n-                    ]);\n+                $item->put('box_names', $query->box_name);\n+\n+                $statuses = collect();\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n+                    $list_task = collect();\n+                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('comment', '');\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                    $item->put('statuses',array($list_task));\n                 }\n-    \n-                // If no box statuses, add shipment-level status\n-                if ($allStatuses->isEmpty()) {\n-                    $allStatuses->push([\n-                        'status' => $shipments->statusVal->name ?? 'Unknown',\n-                        'comment' => '',\n-                        'date' => $shipments->updated_at->format('d-m-Y'),\n-                        'type' => 'shipment_status'\n-                    ]);\n-                }\n-    \n-                // Sort statuses by date\n-                $allStatuses = $allStatuses->sortBy('date');\n-    \n-                $item->put('statuses', $allStatuses);\n-                $data->push($item);\n+                $data->put($j, $item);\n             }\n-    \n-            // Address and shipment details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -68,23 +54,23 @@\n                 'receiver_district' => $shipments->receiver->address->district->name ?? '',\n                 'receiver_state' => $shipments->receiver->address->state->name ?? '',\n                 'receiver_country' => $shipments->receiver->address->country->name ?? '',\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n-                'receiver_boxes' => $shipments->boxes->count(),\n-                'receiver_comment' => $comment\n+                'receiver_boxes' => count($shipments->boxes) ?? '',\n+                'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n+        } else {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'no data is available'\n+            ]);\n         }\n-    \n-        return response()->json([\n-            'success' => false,\n-            'message' => 'No data is available'\n-        ]);\n     }\n \n \n }\n"
                },
                {
                    "date": 1733293778229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n+dd\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n"
                },
                {
                    "date": 1733293787534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-dd\n+\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n"
                },
                {
                    "date": 1733293824119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-\n+dd\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n"
                },
                {
                    "date": 1733293829696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-dd\n+dd( $list_task);\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n"
                },
                {
                    "date": 1733293848924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-dd( $list_task);\n+\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n                         $list_task = collect();\n"
                },
                {
                    "date": 1733295350699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n+ \n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n"
                },
                {
                    "date": 1733301628387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n- \n+\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n"
                },
                {
                    "date": 1733301689243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,41 +10,54 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n+    \n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n                     ->where('box_name', $shipment->box_name)->first();\n             }\n-\n+    \n             $boxeses = $querys;\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-\n+    \n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n+                        // Check if the status is \"finished\"\n+                        if ($status->status->name === 'finished') {\n+                            $list_task = collect();\n+                            $list_task->put('status', $status->status->name);\n+                            $list_task->put('comment', $status->comment);\n+                            $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                            $statuses->put($k, $list_task);\n+                        }\n+                    }\n+                    if ($statuses->isEmpty()) {\n+                        // If no \"finished\" status was found, you can display a message or set an empty status\n                         $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n+                        $list_task->put('status', 'No finished status');\n+                        $list_task->put('comment', '');\n+                        $list_task->put('date', '');\n+                        $statuses->put(0, $list_task);\n                     }\n                     $item->put('statuses', $statuses);\n                 } else {\n+                    // If there are no statuses, show a default status\n                     $list_task = collect();\n-                    $list_task->put('status', $shipments->statusVal->name);\n+                    $list_task->put('status', 'No finished status');\n                     $list_task->put('comment', '');\n-                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                    $list_task->put('date', '');\n+                    $item->put('statuses', array($list_task));\n                 }\n                 $data->put($j, $item);\n             }\n+    \n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -57,21 +70,22 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-\n+    \n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n         } else {\n             return response()->json([\n                 'success' => false,\n-                'message' => 'no data is available'\n+                'message' => 'No data is available'\n             ]);\n         }\n     }\n+    \n \n \n }\n \n"
                },
                {
                    "date": 1733301838166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,54 +10,41 @@\n {\n     public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n         $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-    \n+\n         if (isset($shipments)) {\n             $querys = [];\n             foreach ($shipments->boxes as $i => $shipment) {\n                 $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n                     ->where('box_name', $shipment->box_name)->first();\n             }\n-    \n+\n             $boxeses = $querys;\n             $data = collect();\n             foreach ($querys as $j => $query) {\n                 $item = collect();\n                 $item->put('box_names', $query->box_name);\n-    \n+\n                 $statuses = collect();\n                 if (isset($query->boxStatuses[0])) {\n                     foreach ($query->boxStatuses as $k => $status) {\n-                        // Check if the status is \"finished\"\n-                        if ($status->status->name === 'finished') {\n-                            $list_task = collect();\n-                            $list_task->put('status', $status->status->name);\n-                            $list_task->put('comment', $status->comment);\n-                            $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                            $statuses->put($k, $list_task);\n-                        }\n-                    }\n-                    if ($statuses->isEmpty()) {\n-                        // If no \"finished\" status was found, you can display a message or set an empty status\n                         $list_task = collect();\n-                        $list_task->put('status', 'No finished status');\n-                        $list_task->put('comment', '');\n-                        $list_task->put('date', '');\n-                        $statuses->put(0, $list_task);\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n                     }\n                     $item->put('statuses', $statuses);\n                 } else {\n-                    // If there are no statuses, show a default status\n                     $list_task = collect();\n-                    $list_task->put('status', 'No finished status');\n+                    $list_task->put('status', $shipments->statusVal->name);\n                     $list_task->put('comment', '');\n-                    $list_task->put('date', '');\n-                    $item->put('statuses', array($list_task));\n+                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n+                    $item->put('statuses',array($list_task));\n                 }\n                 $data->put($j, $item);\n             }\n-    \n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -70,22 +57,21 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n         } else {\n             return response()->json([\n                 'success' => false,\n-                'message' => 'No data is available'\n+                'message' => 'no data is available'\n             ]);\n         }\n     }\n-    \n \n \n }\n \n"
                },
                {
                    "date": 1733303649337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,44 +7,42 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request) {\n+    public function tracking(Request $request)\n+    {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n-\n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver', 'boxes', 'boxes.boxStatuses', 'boxes.boxStatuses.status')->first();\n+    \n         if (isset($shipments)) {\n-            $querys = [];\n-            foreach ($shipments->boxes as $i => $shipment) {\n-                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n-                    ->where('box_name', $shipment->box_name)->first();\n-            }\n-\n-            $boxeses = $querys;\n             $data = collect();\n-            foreach ($querys as $j => $query) {\n+            foreach ($shipments->boxes as $j => $box) {\n                 $item = collect();\n-                $item->put('box_names', $query->box_name);\n-\n+                $item->put('box_name', $box->box_name);\n+    \n                 $statuses = collect();\n-                if (isset($query->boxStatuses[0])) {\n-                    foreach ($query->boxStatuses as $k => $status) {\n-                        $list_task = collect();\n-                        $list_task->put('status', $status->status->name);\n-                        $list_task->put('comment', $status->comment);\n-                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                        $statuses->put($k, $list_task);\n-                    }\n-                    $item->put('statuses', $statuses);\n-                } else {\n+                foreach ($box->boxStatuses as $k => $status) {\n                     $list_task = collect();\n+                    $list_task->put('status', $status->status->name);\n+                    $list_task->put('comment', $status->comment);\n+                    $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                    $statuses->push($list_task);\n+                }\n+    \n+                // Include statuses for the box or default to shipment status\n+                if ($statuses->isEmpty()) {\n+                    $list_task = collect();\n                     $list_task->put('status', $shipments->statusVal->name);\n                     $list_task->put('comment', '');\n                     $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $item->put('statuses',array($list_task));\n+                    $statuses->push($list_task);\n                 }\n+                \n+                $item->put('statuses', $statuses);\n                 $data->put($j, $item);\n             }\n+    \n+            // Collect additional receiver details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -57,21 +55,21 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-\n+    \n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n         } else {\n             return response()->json([\n                 'success' => false,\n-                'message' => 'no data is available'\n+                'message' => 'No data is available'\n             ]);\n         }\n     }\n+    \n \n-\n }\n \n"
                },
                {
                    "date": 1733303664786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,42 +7,44 @@\n use App\\Models\\Shipments;\n use App\\Models\\Boxes;\n class TrackingController extends Controller\n {\n-    public function tracking(Request $request)\n-    {\n+    public function tracking(Request $request) {\n         $booking_no = $request->booking_no;\n-        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver', 'boxes', 'boxes.boxStatuses', 'boxes.boxStatuses.status')->first();\n-    \n+        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n+\n         if (isset($shipments)) {\n+            $querys = [];\n+            foreach ($shipments->boxes as $i => $shipment) {\n+                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n+                    ->where('box_name', $shipment->box_name)->first();\n+            }\n+\n+            $boxeses = $querys;\n             $data = collect();\n-            foreach ($shipments->boxes as $j => $box) {\n+            foreach ($querys as $j => $query) {\n                 $item = collect();\n-                $item->put('box_name', $box->box_name);\n-    \n+                $item->put('box_names', $query->box_name);\n+\n                 $statuses = collect();\n-                foreach ($box->boxStatuses as $k => $status) {\n+                if (isset($query->boxStatuses[0])) {\n+                    foreach ($query->boxStatuses as $k => $status) {\n+                        $list_task = collect();\n+                        $list_task->put('status', $status->status->name);\n+                        $list_task->put('comment', $status->comment);\n+                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n+                        $statuses->put($k, $list_task);\n+                    }\n+                    $item->put('statuses', $statuses);\n+                } else {\n                     $list_task = collect();\n-                    $list_task->put('status', $status->status->name);\n-                    $list_task->put('comment', $status->comment);\n-                    $list_task->put('date', $status->updated_at->format('d-m-Y'));\n-                    $statuses->push($list_task);\n-                }\n-    \n-                // Include statuses for the box or default to shipment status\n-                if ($statuses->isEmpty()) {\n-                    $list_task = collect();\n                     $list_task->put('status', $shipments->statusVal->name);\n                     $list_task->put('comment', '');\n                     $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n-                    $statuses->push($list_task);\n+                    $item->put('statuses',array($list_task));\n                 }\n-                \n-                $item->put('statuses', $statuses);\n                 $data->put($j, $item);\n             }\n-    \n-            // Collect additional receiver details\n             $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n             $adress = collect([\n                 'invoice_number' => $shipments->booking_number,\n                 'invoice_date' => $shipments->created_at->format('d/m/Y'),\n@@ -55,21 +57,21 @@\n                 'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                 'receiver_boxes' => count($shipments->boxes) ?? '',\n                 'receiver_comment' => $comment ?? ''\n             ]);\n-    \n+\n             return response()->json([\n                 'success' => true,\n                 'data' => $data,\n                 'adress' => $adress,\n             ]);\n         } else {\n             return response()->json([\n                 'success' => false,\n-                'message' => 'No data is available'\n+                'message' => 'no data is available'\n             ]);\n         }\n     }\n-    \n \n+\n }\n \n"
                }
            ],
            "date": 1733222046243,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Shipments;\nuse App\\Models\\Boxes;\nclass TrackingController extends Controller\n{\n    public function tracking(Request $request) {\n        $booking_no = $request->booking_no;\n        $shipments = Shipments::where('booking_number', $booking_no)->with('receiver')->first();\n    \n        if (isset($shipments)) {\n            $querys = [];\n            foreach ($shipments->boxes as $i => $shipment) {\n                $querys[$i] = Boxes::with('boxStatuses', 'boxStatuses.status')\n                    ->where('box_name', $shipment->box_name)->first();\n            }\n    \n            $boxeses = $querys;\n            $data = collect();\n            foreach ($querys as $j => $query) {\n                $item = collect();\n                $item->put('box_names', $query->box_name);\n    \n                $statuses = collect();\n                if (isset($query->boxStatuses[0])) {\n                    foreach ($query->boxStatuses as $k => $status) {\n                        $list_task = collect();\n                        $list_task->put('status', $status->status->name);\n                        $list_task->put('comment', $status->comment);\n                        $list_task->put('date', $status->updated_at->format('d-m-Y'));\n                        $list_task->put('finished_date', $status->finished_at?->format('d-m-Y') ?? 'N/A'); // Include finished date\n                        $statuses->put($k, $list_task);\n                    }\n                    $item->put('statuses', $statuses);\n                } else {\n                    $list_task = collect();\n                    $list_task->put('status', $shipments->statusVal->name);\n                    $list_task->put('comment', '');\n                    $list_task->put('date', $shipments->updated_at->format('d-m-Y'));\n                    $list_task->put('finished_date', 'N/A'); // Default for shipments without statuses\n                    $item->put('statuses', array($list_task));\n                }\n                $data->put($j, $item);\n            }\n    \n            $comment = $shipments->boxes->firstWhere('comment', '!=', null)['comment'] ?? null;\n            $adress = collect([\n                'invoice_number' => $shipments->booking_number,\n                'invoice_date' => $shipments->created_at->format('d/m/Y'),\n                'receiver_name' => $shipments->receiver->name ?? '',\n                'receiver_address' => $shipments->receiver->address->address ?? '',\n                'receiver_city_name' => $shipments->receiver->city_name ?? '',\n                'receiver_district' => $shipments->receiver->address->district->name ?? '',\n                'receiver_state' => $shipments->receiver->address->state->name ?? '',\n                'receiver_country' => $shipments->receiver->address->country->name ?? '',\n                'receiver_zip_code' => $shipments->receiver->zip_code ?? '',\n                'receiver_boxes' => count($shipments->boxes) ?? '',\n                'receiver_comment' => $comment ?? ''\n            ]);\n    \n            return response()->json([\n                'success' => true,\n                'data' => $data,\n                'adress' => $adress,\n            ]);\n        } else {\n            return response()->json([\n                'success' => false,\n                'message' => 'no data is available'\n            ]);\n        }\n    }\n    \n\n\n}\n\n"
        }
    ]
}
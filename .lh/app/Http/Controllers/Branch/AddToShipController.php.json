{
    "sourceFile": "app/Http/Controllers/Branch/AddToShipController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1733203204646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733203233461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,23 +466,8 @@\n         return $ships;\n \n     }\n \n-    public function addMultipleBookingToShipSubmit(Request $request)\n-{\n-    // Validate that at least one checkbox is selected\n-    $request->validate([\n-        'bookingSelection' => 'required|array|min:1', // Ensures at least one checkbox is selected\n-        'bookingSelection.*' => 'integer', // Each checkbox must be an integer value (ID)\n-    ], [\n-        'bookingSelection.required' => 'Please select at least one booking.',\n-        'bookingSelection.min' => 'You must select at least one booking.'\n-    ]);\n+    \n \n-    // If validation passes, proceed with the logic to process the booking\n-    // For example, save the data to the database, etc.\n-    // ...\n-}\n \n-\n-\n }\n"
                },
                {
                    "date": 1733203264504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,8 +466,23 @@\n         return $ships;\n \n     }\n \n-    \n+    public function addMultipleBookingToShipSubmit(Request $request)\n+{\n+    // Validate that at least one checkbox is selected\n+    $request->validate([\n+        'bookingSelection' => 'required|array|min:1', // Ensures at least one checkbox is selected\n+        'bookingSelection.*' => 'integer', // Each checkbox must be an integer value (ID)\n+    ], [\n+        'bookingSelection.required' => 'Please select at least one booking.',\n+        'bookingSelection.min' => 'You must select at least one booking.'\n+    ]);\n \n+    // If validation passes, proceed with the logic to process the booking\n+    // For example, save the data to the database, etc.\n+    // ...\n+}\n \n+\n+\n }\n"
                },
                {
                    "date": 1733203357789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,23 +466,8 @@\n         return $ships;\n \n     }\n \n-    public function addMultipleBookingToShipSubmit(Request $request)\n-{\n-    // Validate that at least one checkbox is selected\n-    $request->validate([\n-        'bookingSelection' => 'required|array|min:1', // Ensures at least one checkbox is selected\n-        'bookingSelection.*' => 'integer', // Each checkbox must be an integer value (ID)\n-    ], [\n-        'bookingSelection.required' => 'Please select at least one booking.',\n-        'bookingSelection.min' => 'You must select at least one booking.'\n-    ]);\n+    \n \n-    // If validation passes, proceed with the logic to process the booking\n-    // For example, save the data to the database, etc.\n-    // ...\n-}\n \n-\n-\n }\n"
                },
                {
                    "date": 1733203987139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,8 +466,24 @@\n         return $ships;\n \n     }\n \n-    \n+    public function addMultipleBookingtoshipSubmit(Request $request)\n+{\n+    // Validate that at least one checkbox is selected\n+    $request->validate([\n+        'bookingSelection' => 'required|array|min:1', // Ensure bookingSelection is an array and not empty\n+    ], [\n+        'bookingSelection.required' => 'You must select at least one box before submitting.',\n+        'bookingSelection.min' => 'You must select at least one box before submitting.',\n+    ]);\n \n+    // Handle the valid data\n+    $selectedBoxes = $request->input('bookingSelection');\n+    // Process the selected boxes...\n \n+    return redirect()->back()->with('success', 'Form submitted successfully!');\n }\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1733204049852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,25 +465,26 @@\n         }\n         return $ships;\n \n     }\n-\n     public function addMultipleBookingtoshipSubmit(Request $request)\n-{\n-    // Validate that at least one checkbox is selected\n-    $request->validate([\n-        'bookingSelection' => 'required|array|min:1', // Ensure bookingSelection is an array and not empty\n-    ], [\n-        'bookingSelection.required' => 'You must select at least one box before submitting.',\n-        'bookingSelection.min' => 'You must select at least one box before submitting.',\n-    ]);\n+    {\n+        // Validate the request\n+        $request->validate([\n+            'bookingSelection' => 'required|array|min:1', // Validate as an array with at least one selection\n+        ], [\n+            'bookingSelection.required' => 'You must select at least one box before submitting.',\n+            'bookingSelection.min' => 'You must select at least one box before submitting.',\n+        ]);\n+    \n+        // If validation passes, process the data\n+        $selectedBoxes = $request->input('bookingSelection');\n+        // Example: log the selected boxes for debugging\n+        // Log::info('Selected boxes: ', $selectedBoxes);\n+    \n+        // Continue processing\n+        return redirect()->back()->with('success', 'Form submitted successfully!');\n+    }\n+    \n \n-    // Handle the valid data\n-    $selectedBoxes = $request->input('bookingSelection');\n-    // Process the selected boxes...\n \n-    return redirect()->back()->with('success', 'Form submitted successfully!');\n }\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1733204568964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,26 +465,8 @@\n         }\n         return $ships;\n \n     }\n-    public function addMultipleBookingtoshipSubmit(Request $request)\n-    {\n-        // Validate the request\n-        $request->validate([\n-            'bookingSelection' => 'required|array|min:1', // Validate as an array with at least one selection\n-        ], [\n-            'bookingSelection.required' => 'You must select at least one box before submitting.',\n-            'bookingSelection.min' => 'You must select at least one box before submitting.',\n-        ]);\n-    \n-        // If validation passes, process the data\n-        $selectedBoxes = $request->input('bookingSelection');\n-        // Example: log the selected boxes for debugging\n-        // Log::info('Selected boxes: ', $selectedBoxes);\n-    \n-        // Continue processing\n-        return redirect()->back()->with('success', 'Form submitted successfully!');\n-    }\n-    \n+   \n \n \n }\n"
                },
                {
                    "date": 1733205257689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,8 +465,53 @@\n         }\n         return $ships;\n \n     }\n-   \n+    public function addMultipleBookingtoshipSubmit(Request $request) {\n+        // Step 1: Get box IDs from the request and split them into an array\n+        $boxIds = explode(\",\", $request->box_id);\n+    \n+        // Step 2: Find the ship by its ID\n+        $getShip = Ships::find($request->ship_id);\n+    \n+        // Step 3: Check if the ship exists\n+        if (!$getShip) {\n+            toastr()->error('Ship not found.');\n+            return redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n+        }\n+    \n+        // Step 4: Loop through the box IDs\n+        foreach($boxIds as $boxId) {\n+    \n+            // Step 5: Find the box by its ID\n+            $boxes = Boxes::find($boxId);\n+    \n+            // Step 6: Check if the box exists\n+            if (!$boxes) {\n+                toastr()->error(\"Box with ID {$boxId} not found.\");\n+                continue; // Skip this box and continue with the next one\n+            }\n+    \n+            // Step 7: Proceed with updating the box if it exists\n+            $boxes->is_shipment = 1;\n+            $boxes->ship_id = $request->ship_id;\n+            $boxes->save(); // Save the updated box\n+    \n+            // Step 8: Create a new BoxesStatuses entry\n+            $bookings = new BoxesStatuses();\n+            $bookings->status_id = $getShip->shipment_status; // Get the shipment status from the ship\n+            $bookings->box_id = $boxId; // Associate the box with the status\n+            $bookings->created_at = date('Y-m-d'); // Set the creation date\n+            $bookings->save(); // Save the status\n+    \n+        }\n+    \n+        // Step 9: Success message after processing all boxes\n+        toastr()->success('Booking Added Successfully to the Shipment.');\n+    \n+        // Step 10: Redirect back to the shipment page\n+        return redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n+    }\n+    \n \n \n }\n"
                },
                {
                    "date": 1733205269895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,53 +465,8 @@\n         }\n         return $ships;\n \n     }\n-    public function addMultipleBookingtoshipSubmit(Request $request) {\n-        // Step 1: Get box IDs from the request and split them into an array\n-        $boxIds = explode(\",\", $request->box_id);\n-    \n-        // Step 2: Find the ship by its ID\n-        $getShip = Ships::find($request->ship_id);\n-    \n-        // Step 3: Check if the ship exists\n-        if (!$getShip) {\n-            toastr()->error('Ship not found.');\n-            return redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n-        }\n-    \n-        // Step 4: Loop through the box IDs\n-        foreach($boxIds as $boxId) {\n-    \n-            // Step 5: Find the box by its ID\n-            $boxes = Boxes::find($boxId);\n-    \n-            // Step 6: Check if the box exists\n-            if (!$boxes) {\n-                toastr()->error(\"Box with ID {$boxId} not found.\");\n-                continue; // Skip this box and continue with the next one\n-            }\n-    \n-            // Step 7: Proceed with updating the box if it exists\n-            $boxes->is_shipment = 1;\n-            $boxes->ship_id = $request->ship_id;\n-            $boxes->save(); // Save the updated box\n-    \n-            // Step 8: Create a new BoxesStatuses entry\n-            $bookings = new BoxesStatuses();\n-            $bookings->status_id = $getShip->shipment_status; // Get the shipment status from the ship\n-            $bookings->box_id = $boxId; // Associate the box with the status\n-            $bookings->created_at = date('Y-m-d'); // Set the creation date\n-            $bookings->save(); // Save the status\n-    \n-        }\n-    \n-        // Step 9: Success message after processing all boxes\n-        toastr()->success('Booking Added Successfully to the Shipment.');\n-    \n-        // Step 10: Redirect back to the shipment page\n-        return redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n-    }\n-    \n+   \n \n \n }\n"
                },
                {
                    "date": 1733206651550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,26 +336,44 @@\n         return  redirect()->route('branch.ships.addMoreBookingtoship', array('ship_id' => $request->ship_id));\n     }\n \n     public function addMultipleBookingtoshipSubmit(Request $request) {\n-        $boxIds = explode(\",\",$request->box_id);\n+\n+        $boxIds = explode(\",\", $request->box_id);\n+    \n         $getShip = Ships::find($request->ship_id);\n-        foreach($boxIds as $boxId) {\n+    \n+        if (!$getShip) {\n+            toastr()->error('Ship not found.');\n+            return redirect()->route('branch.ships.addbookingtoship', ['ship_id' => $request->ship_id]);\n+        }\n+    \n+        foreach ($boxIds as $boxId) {\n+    \n             $boxes = Boxes::find($boxId);\n+    \n+            if (!$boxes) {\n+                // You can choose to continue or show an error if a box isn't found\n+                toastr()->error(\"Box with ID $boxId not found.\");\n+                continue;  // Skip to the next iteration if box is not found\n+            }\n+    \n             $boxes->is_shipment = 1;\n             $boxes->ship_id = $request->ship_id;\n             $boxes->save();\n-\n+    \n             $bookings = new BoxesStatuses();\n             $bookings->status_id = $getShip->shipment_status;\n             $bookings->box_id = $boxId;\n-            $bookings->created_at = date('Y-m-d');\n+            $bookings->created_at = now();  // Using now() for the current timestamp\n             $bookings->save();\n         }\n+    \n         toastr()->success('Booking Added Successfully to the Shipment.');\n-        return  redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n+        return redirect()->route('branch.ships.addbookingtoship', ['ship_id' => $request->ship_id]);\n+    \n     }\n-\n+    \n     public function multiSelectionUpdate(Request $request) {\n         $selectedBoxes = $request->selectedBoxes;\n         $boxIds = explode(\",\",$selectedBoxes);\n         $hidSelectLists = explode(\",\",$request->hidSelectList);\n"
                },
                {
                    "date": 1733207580865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,44 +336,26 @@\n         return  redirect()->route('branch.ships.addMoreBookingtoship', array('ship_id' => $request->ship_id));\n     }\n \n     public function addMultipleBookingtoshipSubmit(Request $request) {\n-\n-        $boxIds = explode(\",\", $request->box_id);\n-    \n+        $boxIds = explode(\",\",$request->box_id);\n         $getShip = Ships::find($request->ship_id);\n-    \n-        if (!$getShip) {\n-            toastr()->error('Ship not found.');\n-            return redirect()->route('branch.ships.addbookingtoship', ['ship_id' => $request->ship_id]);\n-        }\n-    \n-        foreach ($boxIds as $boxId) {\n-    \n+        foreach($boxIds as $boxId) {\n             $boxes = Boxes::find($boxId);\n-    \n-            if (!$boxes) {\n-                // You can choose to continue or show an error if a box isn't found\n-                toastr()->error(\"Box with ID $boxId not found.\");\n-                continue;  // Skip to the next iteration if box is not found\n-            }\n-    \n             $boxes->is_shipment = 1;\n             $boxes->ship_id = $request->ship_id;\n             $boxes->save();\n-    \n+\n             $bookings = new BoxesStatuses();\n             $bookings->status_id = $getShip->shipment_status;\n             $bookings->box_id = $boxId;\n-            $bookings->created_at = now();  // Using now() for the current timestamp\n+            $bookings->created_at = date('Y-m-d');\n             $bookings->save();\n         }\n-    \n         toastr()->success('Booking Added Successfully to the Shipment.');\n-        return redirect()->route('branch.ships.addbookingtoship', ['ship_id' => $request->ship_id]);\n-    \n+        return  redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n     }\n-    \n+\n     public function multiSelectionUpdate(Request $request) {\n         $selectedBoxes = $request->selectedBoxes;\n         $boxIds = explode(\",\",$selectedBoxes);\n         $hidSelectLists = explode(\",\",$request->hidSelectList);\n"
                },
                {
                    "date": 1733207590400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,9 +465,9 @@\n         }\n         return $ships;\n \n     }\n-    public function addMultipleBookingtoshipSubmit(Request $request)\n+  public function addMultipleBookingtoshipSubmit(Request $request)\n     {\n         // Validate the request\n         $request->validate([\n             'bookingSelection' => 'required|array|min:1', // Validate as an array with at least one selection\n"
                }
            ],
            "date": 1733203204646,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers\\Branch;\n\nuse App\\Http\\Controllers\\BaseController;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Agencies;\nuse App\\Models\\Branches;\nuse App\\Models\\Countries;\nuse App\\Models\\Customers;\nuse App\\Models\\Packages;\nuse App\\Models\\Shipments;\nuse App\\Models\\Statuses;\nuse App\\Models\\Staffs;\nuse App\\Models\\Boxes;\nuse App\\Models\\Ships;\nuse App\\Models\\ShipsBookings;\nuse App\\Models\\ShipmentsStatuses;\nuse App\\Models\\StatusesBookingNumber;\nuse App\\Models\\BoxesStatuses;\nuse App\\Models\\ShipTypes;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\nuse App\\Jobs\\SendWhatsAppMessage;\n\nclass AddToShipController extends BaseController\n{\n\n    public function addbookingToShip(Request $request) {\n\n        $ships = Ships::with('createdBy')->with('shipmentStatus')->findOrFail($request->ship_id);\n        $bookings = Shipments::where('branch_id', branch()->id)->where('ship_id',  NULL)->get();\n\n        $ship_bookingsList =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n                                        $query->where('branch_id', branch()->id);\n                                    })->where('is_transfer',0)->where('is_shipment',1)\n                                    ->where('ship_id',$request->ship_id)->get();\n\n        // ShipsBookings::with('shipment','shipment.boxes')->with('ship')\n        //                         ->where('ship_id', $request->ship_id)\n        //                         ->whereHas('shipment.shipmentStatus', function ($q) {\n        //                             $q->where('shipments.branch_id',branch()->id);\n        //                         })\n        //                         ->get();\n        $shipId = $request->ship_id;\n        $shipments = Shipments::with('driver')->where('branch_id',branch()->id)->latest()->orderBy('created_at', 'desc')->get();\n        $querys =Boxes::with('shipment.driver','shipment.boxes','packages')->whereHas('shipment',function ($query) {\n                                $query->where('branch_id', branch()->id);\n                                $query->where('ship_id', NULL);\n                            })->where('is_transfer',0)->where('is_shipment',0);\n\n        $boxes = $querys->get();\n        $ship_types = ShipTypes::all();\n        $agencies = Agencies::all();\n        return view('branches.addtoship.addbooking', compact('bookings','ships', 'ship_bookingsList','shipId','shipments','boxes', 'ship_types', 'agencies'));\n    }\n\n    public function createbookingtoship(Request $request) {\n\n        $ships = Ships::findOrFail($request->ship_id);\n        $ships->shipment_id = $request->shipment_id;\n        $ships->shipment_status = $request->status_id;\n        $ships->awd_id = $request->awd_id;\n        $ships->shipment_status = $request->status_id;\n        $ships->estimated_delivery = $request->estimated_delivery;\n        $ships->created_date = $request->created_date;\n\n        $ships->save();\n\n        $booking_ids = $request->booking_ids;\n        if(!empty($booking_ids)) {\n            foreach( $booking_ids as $booking_id) {\n                $shipsbooking = new ShipsBookings();\n                $shipsbooking->ship_id = $request->ship_id;\n                $shipsbooking->booking_id =  $booking_id;\n                $shipsbooking->save();\n                Shipments::where('id', $booking_id)->update(['ship_id' => $request->ship_id, 'status_id'=> $request->status_id]);\n            }\n        }\n        toastr()->success(section_title() . ' Updated Successfully');\n        return route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n\n    }\n\n    public function customermanifestprint(Request $request){\n\n        $ships = Ships::with('createdBy')->with('shipmentStatus')->findOrFail($request->ship_id);\n        $bookings = Shipments::where('branch_id', branch()->id)->where('ship_id',  NULL)->get();\n\n        $ship_bookingsList =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n                                        $query->where('branch_id', branch()->id);\n                                    })->where('is_transfer',0)->where('is_shipment',1)\n                                    ->where('ship_id',$request->ship_id)->get();\n\n        // ShipsBookings::with('shipment','shipment.boxes')->with('ship')\n        //                         ->where('ship_id', $request->ship_id)\n        //                         ->whereHas('shipment.shipmentStatus', function ($q) {\n        //                             $q->where('shipments.branch_id',branch()->id);\n        //                         })\n        //                         ->get();\n        // dd($ship_bookingsList[0]);\n        $shipId = $request->ship_id;\n        $shipments = Shipments::with('driver')->where('branch_id',branch()->id)->latest()->orderBy('created_at', 'desc')->get();\n        $querys =Boxes::with('shipment.driver','shipment.boxes')->whereHas('shipment',function ($query) {\n                                $query->where('branch_id', branch()->id);\n                                $query->where('ship_id', NULL);\n                            })->where('is_transfer',0)->where('is_shipment',0);\n\n        $boxes = $querys->get();\n        return view('branches.addtoship.customermanifestprint', compact('bookings','ships', 'ship_bookingsList','shipId','shipments','boxes'));\n    }\n\n    public function deliverylistptint(Request $request){\n\n        $ships = Ships::with('createdBy')->with('shipmentStatus')->findOrFail($request->ship_id);\n        $bookings = Shipments::where('branch_id', branch()->id)->where('ship_id',  NULL)->get();\n        $ship_bookingsList =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n                                        $query->where('branch_id', branch()->id);\n                                    })->where('is_transfer',0)->where('is_shipment',1)\n                                    ->where('ship_id',$request->ship_id)->get();\n\n        // ShipsBookings::with('shipment','shipment.boxes')->with('ship')\n        //                         ->where('ship_id', $request->ship_id)\n        //                         ->whereHas('shipment.shipmentStatus', function ($q) {\n        //                             $q->where('shipments.branch_id',branch()->id);\n        //                         })\n        //                         ->get();\n        // dd($ship_bookingsList[0]);\n        $shipId = $request->ship_id;\n        $shipments = Shipments::with('driver')->where('branch_id',branch()->id)->latest()->orderBy('created_at', 'desc')->get();\n        $querys =Boxes::with('shipment.driver','shipment.boxes')->whereHas('shipment',function ($query) {\n                                $query->where('branch_id', branch()->id);\n                                $query->where('ship_id', NULL);\n                            })->where('is_transfer',0)->where('is_shipment',0);\n\n        $boxes = $querys->get();\n        $idsss = [];\n        foreach ($ship_bookingsList as $box) {\n            foreach ($bookings as $bookin) {\n                if($box->shipment->booking_number == $bookin->booking_number ) {\n                    $idsss[] = $bookin->id;\n                }\n            }\n        }\n        $delivery_list = [];\n        $z = array_values(array_unique($idsss));\n        foreach ($z as $zz) {\n            $shipment = Shipments::find($zz);\n            if ($shipment) {\n                $delivery_list[] = $shipment;\n            }\n        }\n\n        $shipmentsCollection = collect($delivery_list);\n        return view('branches.addtoship.deliverylistptint', compact('bookings','ships', 'ship_bookingsList','shipId','shipments','boxes', 'delivery_list'));\n    }\n\n    public function packinglistptint(Request $request){\n        $ships = Ships::with('createdBy')->with('shipmentStatus')->findOrFail($request->ship_id);\n        $bookings = Shipments::where('branch_id', branch()->id)->where('ship_id',  NULL)->get();\n\n        $ship_bookingsList =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n                                        $query->where('branch_id', branch()->id);\n                                    })->where('is_transfer',0)->where('is_shipment',1)\n                                    ->where('ship_id',$request->ship_id)->get();\n\n        // ShipsBookings::with('shipment','shipment.boxes')->with('ship')\n        //                         ->where('ship_id', $request->ship_id)\n        //                         ->whereHas('shipment.shipmentStatus', function ($q) {\n        //                             $q->where('shipments.branch_id',branch()->id);\n        //                         })\n        //                         ->get();\n        // dd($ship_bookingsList[0]);\n\n        $shipId = $request->ship_id;\n        $shipments = Shipments::with('driver')->where('branch_id',branch()->id)->latest()->orderBy('created_at', 'desc')->get();\n        $querys =Boxes::with('shipment.driver','shipment.boxes')->whereHas('shipment',function ($query) {\n                                $query->where('branch_id', branch()->id);\n                                $query->where('ship_id', NULL);\n                            })->where('is_transfer',0)->where('is_shipment',0);\n\n        $boxes = $querys->get();\n        return view('branches.addtoship.packinglistptint', compact('bookings','ships', 'ship_bookingsList','shipId','shipments','boxes'));\n    }\n\n    public function updatebookingtoship(Request $request) {\n        $ships = Ships::findOrFail($request->ship_id);\n        $ships->tracking_url = $request->tracking_url;\n        $ships->shipment_status = $request->status_id;\n        $ships->created_date = $request->created_date;\n        $ships->save();\n        toastr()->success(section_title() . ' Updated Successfully');\n\n        return  redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n\n    }\n\n    public function multiUpdatebookingtoship(Request $request) {\n\n        $shipsIds = explode(\",\",$request->shipIds);\n        $shipmentIds = explode(\",\",$request->shipmentIds);\n        $boxesvals = explode(\",\",trim($request->selectedBoxId,\",\"));\n        foreach($boxesvals as $boxes) {\n            $bookings = new BoxesStatuses();\n            $bookings->status_id = $request->status_id;\n            $bookings->box_id = $boxes;\n            $bookings->comment = $request->comment;\n          //  $bookings->expected_date = $request->expected_date;\n            $bookings->created_at = (!empty($request->created_date)) ? $request->created_date : date('Y-m-d');\n            $bookings->save();\n        }\n        if($request->status_id == 8){\n            $boxes =Boxes::whereIn('id', $boxesvals)->get();\n            $shipmentIds = $boxes->pluck('shipment_id')->unique();\n            $Shipments = Shipments::whereIn('id', $shipmentIds)->get();\n            foreach($Shipments as $shipment) {\n                $whatsapp_number = $shipment->sender->country_code_whatsapp.$shipment->sender->whatsapp_number;\n                $sender_name = $shipment->sender->name??'Customer';\n                $booking_numb = $shipment->booking_number ??'0';\n                $expected_date = $request->expected_date??'0';\n                $message = [\n                    \"from_phone_number_id\"=> \"459126347274405\",\n                    \"phone_number\"=>$whatsapp_number,\n                    \"template_name\" => \"hello_updat\",\n                    \"template_language\" => \"en\",\n                    \"header_field_1\" => $sender_name,\n                    \"field_1\" => $booking_numb,\n                    \"field_2\" => $expected_date,\n                    'contact' => [\n                        'first_name' => $sender_name,\n                        'country' => 'India',\n                        'language_code' => 'en',\n                        'groups' => 'examplegroup1,examplegroup2'\n                    ]\n                // Add more users as needed\n                ];\n                SendWhatsAppMessage::dispatch($message);\n            }\n        }\n        // foreach(array_unique($shipmentIds) as $shipmentId) {\n        //     $checkTranssfered = StatusesBookingNumber::where('status_id',17)->where('booking_id',$shipmentId)->first();\n        //     if(empty($checkTranssfered)) {\n        //         $ships = new StatusesBookingNumber();\n        //         $ships->status_id = $request->status_id;\n        //         $ships->booking_id = $shipmentId;\n        //         $ships->created_at = $request->created_date;\n        //         $ships->save();\n\n        //         $shipments = Shipments::findOrFail($shipmentId);\n        //         $shipments->status_id = $request->status_id;\n        //         $shipments->created_date = $request->created_date;\n        //         $shipments->save();\n        //     } else {\n        //         return response()->json(['success'=>'Already Transferred Item.']);\n        //     }\n        // }\n\n        // toastr()->success(section_title() . ' Updated Successfully');\n\n        // return response()->json(['success'=>'Status Updated Successfully']);\n\n    }\n\n    public function boxStatusUpdatetoship(Request $request) {\n        foreach($request->boxIds as $key => $boxId) {\n            if($request->status[$key] != '0') {\n                $bookings = new BoxesStatuses();\n                $bookings->status_id = $request->status[$key];\n                $bookings->box_id = $boxId;\n                $bookings->expected_date = $request->expected_date[$key];\n                $bookings->comment = $request->comment[$key];\n                $bookings->created_at = (!empty($request->statusDate[$key])) ? $request->statusDate[$key] : date('Y-m-d');\n                $bookings->save();\n                if($request->status[$key] == 8){\n                    $boxes =Boxes::find($boxId);\n                    $shipment = Shipments::find($boxes->shipment_id);\n                        $whatsapp_number = $shipment->sender->country_code_whatsapp.$shipment->sender->whatsapp_number;\n                        $sender_name = $shipment->sender->name??'Customer';\n                        $booking_numb = $shipment->booking_number ??'0';\n                        $expected_date = $request->expected_date[$key]??'0';\n                        $message = [\n                            \"from_phone_number_id\"=> \"459126347274405\",\n                            \"phone_number\"=>$whatsapp_number,\n                            \"template_name\" => \"hello_updat\",\n                            \"template_language\" => \"en\",\n                            \"header_field_1\" => $sender_name,\n                            \"field_1\" => $booking_numb,\n                            \"field_2\" => $expected_date,\n                            'contact' => [\n                                'first_name' => \"ananthu\",\n                                'country' => 'India',\n                                'language_code' => 'en',\n                                'groups' => 'examplegroup1,examplegroup2'\n                            ]\n                        // Add more users as needed\n                        ];\n                    SendWhatsAppMessage::dispatch($message);\n                }\n            }\n        }\n        toastr()->success('Status Updated Successfully');\n\n        return redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n    }\n\n    public function undoaddbooking($id) {\n        $boxes  = Boxes::findOrFail($id);\n        $boxes->is_shipment = 0;\n        $boxes->ship_id = null;\n        $boxes->is_select = 0;\n        $boxes->save();\n\n        $boxStatuses = BoxesStatuses::where('box_id',$id)->delete();\n        toastr()->success(section_title() . ' Deleted Successfully');\n        return  redirect()->back();\n\n    }\n\n    public function addMoreBookingtoship(Request $request) {\n        $ships = Ships::with('createdBy')->with('shipmentStatus')->findOrFail($request->ship_id);\n        $bookings = Shipments::where('branch_id', branch()->id)->where('ship_id',  NULL)->get();\n        $ship_bookingsList =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n                                            $query->where('branch_id', branch()->id);\n                                        })->where('is_transfer',0)->where('ship_id',$request->ship_id)->where('is_shipment',1)->get();\n        $statuses = status_list_admin(); //Statuses::get();\n        return view('branches.addtoship.addMoreBooking', compact('bookings','ships', 'ship_bookingsList','statuses'));\n    }\n\n    public function addMoreBookingtoshipSubmit(Request $request) {\n        $shipsbooking = new ShipsBookings();\n        $shipsbooking->ship_id = $request->ship_id;\n        $shipsbooking->booking_id =  $request->booking_id;\n        $shipsbooking->save();\n        Shipments::where('id', $request->booking_id)->update(['ship_id' => $request->ship_id, 'status_id'=> $request->ship_status]);\n        toastr()->success('Booking Added Successfully to the Shipment.');\n        return  redirect()->route('branch.ships.addMoreBookingtoship', array('ship_id' => $request->ship_id));\n    }\n\n    public function addMultipleBookingtoshipSubmit(Request $request) {\n        $boxIds = explode(\",\",$request->box_id);\n        $getShip = Ships::find($request->ship_id);\n        foreach($boxIds as $boxId) {\n            $boxes = Boxes::find($boxId);\n            $boxes->is_shipment = 1;\n            $boxes->ship_id = $request->ship_id;\n            $boxes->save();\n\n            $bookings = new BoxesStatuses();\n            $bookings->status_id = $getShip->shipment_status;\n            $bookings->box_id = $boxId;\n            $bookings->created_at = date('Y-m-d');\n            $bookings->save();\n        }\n        toastr()->success('Booking Added Successfully to the Shipment.');\n        return  redirect()->route('branch.ships.addbookingtoship', array('ship_id' => $request->ship_id));\n    }\n\n    public function multiSelectionUpdate(Request $request) {\n        $selectedBoxes = $request->selectedBoxes;\n        $boxIds = explode(\",\",$selectedBoxes);\n        $hidSelectLists = explode(\",\",$request->hidSelectList);\n        Boxes::where('is_shipment',0)->whereIn('id',$hidSelectLists)->update(['is_select'=>0]);\n        $boxes = Boxes::whereIn('id',$boxIds)->where('is_shipment',0)->update(['is_select'=>1]);\n\n        $querys =Boxes::with('shipment.driver','shipment.boxes')->whereHas('shipment',function ($query) {\n            $query->where('branch_id', branch()->id);\n            $query->where('ship_id', NULL);\n        })->where('is_transfer',0)->where('is_shipment',0)->where(\"is_select\",1);\n        $boxes = $querys->get();\n        $box_id = [];\n        foreach($boxes as $key => $box) {\n            $box_id[\"boxes\"][$key] = $box->id;\n        }\n        return $box = $box_id;\n    }\n\n    public function manifestoFilterData($ship_id,$type,$status) {\n        $query =  Boxes::with('shipment.shipmentStatus','boxStatuses.status')->whereHas('shipment',function ($query) {\n            $query->where('branch_id', branch()->id);\n        })->where('is_transfer',0)->where('ship_id',$ship_id)->where('is_shipment',1);\n        if($type == \"status\") {\n            $ships = $query->whereHas('boxStatuses', function ($q) use ($status) {\n                $q->where('boxes_statuses.status_id',$status);\n            })->orderBy('id','desc')->get();\n        } else if($type == 'boxNumber') {\n            $ships = $query->where('box_name','LIKE',\"%\".$status.\"%\")->orderBy('id','desc')->get();\n        } else {\n            $ships = $query->whereHas('shipment', function ($q) use ($status) {\n                $q->where('shipments.booking_number','LIKE',$status);\n            })->orderBy('id','desc')->get();\n        }\n            foreach($ships as $key => $ship) {\n                if(!empty($ship->boxStatuses)) {\n                    $lastStatus = collect($ship->boxStatuses)->last();\n                    $ships[$key][\"last_status\"] =  $lastStatus->status->name;\n                } else {\n                    $ships[$key][\"last_status\"] = \"\";\n                }\n                $ships[$key][\"dated_on\"] =  date('d-m-Y',strtotime($ship->created_at));\n                if($lastStatus->status->name == 'Pending') {\n                    $style= \"background-color:#ec1616e6;\";\n                } else if ($lastStatus->status->name == 'Shipment on hold') {\n                    $style= \"background-color:#ffdb00;\";\n                } else {\n                    $style= \"background-color:none;\";\n                }\n                $ships[$key][\"style\"] = $style;\n            }\n        return $ships;\n    }\n\n    public function viewManifestoFilterData($ship_id,$type,$status) {\n        $query =  Boxes::with('shipment.driver','shipment.boxes','shipment.shipmentStatus','shipment.sender.address','shipment.receiver.address','shipment.receiver.address.state','shipment.receiver.address.country','shipment.boxes','boxStatuses.status','shipment.agency','shipment.branch')->whereHas('shipment',function ($query) {\n            $query->where('branch_id', branch()->id);\n        })->where('is_transfer',0)->where('ship_id',$ship_id)->where('is_shipment',1);\n        if($type == \"status\") {\n            $ships = $query->whereHas('boxStatuses', function ($q) use ($status) {\n                $q->where('boxes_statuses.status_id',$status);\n            })->orderBy('id','desc')->get();\n        } else if($type == 'boxNumber') {\n            $ships = $query->where('box_name','LIKE',$status)->orderBy('id','desc')->get();\n        } else {\n            $ships = $query->whereHas('shipment', function ($q) use ($status) {\n                $q->where('shipments.booking_number',$status);\n            })->orderBy('id','desc')->get();\n        }\n        if(!empty($ships)) {\n            foreach($ships as $key => $ship) {\n                if(!empty($ship->boxStatuses)) {\n                    $lastStatus = collect($ship->boxStatuses)->last();\n                    $ships[$key][\"statusId\"] =  $lastStatus->status->id;\n                    $ships[$key][\"last_status\"] =  $lastStatus->status->name;\n                } else {\n                    $ships[$key][\"last_status\"] = \"\";\n                }\n                $ships[$key][\"dated_on\"] =  date('d-m-Y',strtotime($ship->created_at));\n                if($lastStatus->status->name == 'Pending') {\n                    $style= \"background-color:#ec1616e6;\";\n                    $disabled = \"disabled='disabled'\";\n                    $newClass =\"k-state-disabled\";\n                } else if ($lastStatus->status->name == 'Shipment on hold') {\n                    $style= \"background-color:#ffdb00;\";\n                    $disabled = \"disabled='disabled'\";\n                    $newClass =\"k-state-disabled\";\n                } else {\n                    $style= \"background-color:none;\";\n                    $disabled = \"\";\n                    $newClass = \"k-checkbox\";\n                }\n                $ships[$key][\"style\"] = $style;\n                $ships[$key][\"disabled\"] = $disabled;\n                $ships[$key][\"newClass\"] = $newClass;\n\n                $itemList = [];\n                foreach($ship->packages as $item) {\n                    $itemList[] = $item->description.\"-\".$item->quantity;\n                }\n                $ships[$key][\"itemsList\"] = implode(', ', $itemList);\n\n                $addressString = $ship->shipment->receiver->address->address;\n                $pieces = explode(',', $addressString);\n                $ships[$key][\"district\"] = array_pop($pieces);\n\n            }\n        }\n        return $ships;\n\n    }\n\n    public function addMultipleBookingToShipSubmit(Request $request)\n{\n    // Validate that at least one checkbox is selected\n    $request->validate([\n        'bookingSelection' => 'required|array|min:1', // Ensures at least one checkbox is selected\n        'bookingSelection.*' => 'integer', // Each checkbox must be an integer value (ID)\n    ], [\n        'bookingSelection.required' => 'Please select at least one booking.',\n        'bookingSelection.min' => 'You must select at least one booking.'\n    ]);\n\n    // If validation passes, proceed with the logic to process the booking\n    // For example, save the data to the database, etc.\n    // ...\n}\n\n\n\n}\n"
        }
    ]
}